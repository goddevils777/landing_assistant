// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'error') {
    const container = document.getElementById('notificationsContainer');

    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    container.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        removeNotification(notification);
    }, 4000);
}

function removeNotification(notification) {
    notification.classList.add('removing');
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 300);
}

// –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
function sanitizeInput(str) {
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
}

// –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
function fadeInText() {
    const typingElement = document.getElementById('typingText');
    const textParts = [
        { text: "üíé –¢–û–ü–æ–≤–∏–π –ø—ñ–¥–±—ñ—Ä", class: "", delay: 100 },
        { text: "–ê–°–ò–°–¢–ï–ù–¢–Ü–í", class: "accent", delay: 1200 },
        { text: " –≤ –£–∫—Ä–∞—ó–Ω—ñ üá∫üá¶", class: "", delay: 2400 }
    ];
    
    typingElement.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π HTML —Å—Ä–∞–∑—É, –Ω–æ —Å –Ω–µ–≤–∏–¥–∏–º—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    let fullHTML = '';
    textParts.forEach((part, index) => {
        if (index === 1) fullHTML += '<br>';
        if (part.class) {
            fullHTML += `<span class="${part.class}" style="opacity: 0; transform: translateY(30px); transition: all 1.2s ease-out;">${part.text}</span>`;
        } else {
            fullHTML += `<span style="opacity: 0; transform: translateY(30px); transition: all 1.2s ease-out;">${part.text}</span>`;
        }
    });
    
    typingElement.innerHTML = fullHTML;
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    const spans = typingElement.querySelectorAll('span');
    spans.forEach((span, index) => {
        setTimeout(() => {
            span.style.opacity = '1';
            span.style.transform = 'translateY(0)';
        }, textParts[index].delay);
    });
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        fadeInText();
    }, 15000);
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
let contactData = {};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
const startBtn = document.getElementById('startBtn');
const quizSection = document.getElementById('quizSection');
const contactForm = document.getElementById('contactForm');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function initContactForm() {
    startBtn.addEventListener('click', showContactForm);
    contactForm.addEventListener('submit', submitContactForm);
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function showContactForm() {
    startBtn.style.display = 'none';
    quizSection.style.display = 'block';
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function submitContactForm(e) {
    e.preventDefault();
    
    const formData = new FormData(contactForm);
    const contacts = {
        telegram: formData.get('telegram')?.trim() || '',
        phone: formData.get('phone')?.trim() || '',
        email: formData.get('email')?.trim() || ''
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
    const hasContact = contacts.telegram || contacts.phone || contacts.email;
    
    if (!hasContact) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤\'—è–∑–∫—É', 'warning');
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è email –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω
    if (contacts.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(contacts.email)) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email', 'error');
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω
    if (contacts.phone && !/^[\+]?[0-9\s\-\(\)]{10,}$/.test(contacts.phone)) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', 'error');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const submitBtn = contactForm.querySelector('button[type="submit"]');
    submitBtn.innerHTML = '<div class="loading-spinner"></div> –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ...';
    submitBtn.disabled = true;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const contactAnswers = {};
    if (contacts.telegram) contactAnswers['Telegram'] = contacts.telegram;
    if (contacts.phone) contactAnswers['–¢–µ–ª–µ—Ñ–æ–Ω'] = contacts.phone;
    if (contacts.email) contactAnswers['Email'] = contacts.email;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    const success = await sendToTelegram(contactAnswers, 'landing2');
    
    if (success) {
        showNotification('–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
        showSuccessMessage();
    } else {
        showNotification('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑', 'error');
        submitBtn.innerHTML = '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É';
        submitBtn.disabled = false;
    }
}

function showSuccessMessage() {
    quizSection.innerHTML = `
        <div class="quiz-container">
            <div class="success-message">
                <div class="success-icon">
                    <svg width="60" height="60" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="12" cy="12" r="10" stroke="#00ff88" stroke-width="2" fill="rgba(0,255,136,0.1)"/>
                        <path d="m9 12 2 2 4-4" stroke="#00ff88" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h3>–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!</h3>
                <p>–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—å –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥–±–æ—Ä—É —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞.</p>
            </div>
        </div>
    `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram —á–µ—Ä–µ–∑ API
async function sendToTelegram(answers, landingSource) {
    try {
        const response = await fetch('/api/send-telegram', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ answers, landingSource })
        });
        
        if (!response.ok) {
            throw new Error('Server error');
        }
        
        const result = await response.json();
        return result.success;
    } catch (error) {
        console.error('Send error:', error);
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–ª–∞—à–µ–∫
function startAutoHover() {
    const featureCards = document.querySelectorAll('.feature-card');
    if (featureCards.length === 0) return;
    
    let currentIndex = 0;
    
    function animateCard() {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç
        featureCards.forEach(card => card.classList.remove('auto-hover'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–µ
        featureCards[currentIndex].classList.add('auto-hover');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–µ
        currentIndex = (currentIndex + 1) % featureCards.length;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å—Ä–∞–∑—É
    animateCard();
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(animateCard, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
function stopAutoHover() {
    const featureCards = document.querySelectorAll('.feature-card');
    featureCards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            card.classList.remove('auto-hover');
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –∞–Ω–∫–µ—Ç–µ
function scrollToForm() {
    const surveyIntro = document.querySelector('.survey-intro');
    if (surveyIntro) {
        surveyIntro.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function initScrollArrow() {
    const scrollArrow = document.getElementById('scrollArrow');
    if (scrollArrow) {
        scrollArrow.addEventListener('click', scrollToForm);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        fadeInText();
    }, 100);
    initContactForm();
    initScrollArrow();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∞–Ω–∏–º–∞—Ü–∏—é –ø–ª–∞—à–µ–∫ –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    setTimeout(() => {
        startAutoHover();
        stopAutoHover();
    }, 3000);
});