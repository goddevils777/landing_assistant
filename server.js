const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });
const express = require('express');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', __dirname);
console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
console.log('TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
console.log('TELEGRAM_CHAT_ID:', process.env.TELEGRAM_CHAT_ID ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');

// Middleware
app.use(cors());
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (main.css, favicon.svg, images)
app.use('/main.css', express.static(path.join(__dirname, 'main.css')));
app.use('/favicon.svg', express.static(path.join(__dirname, 'favicon.svg')));
app.use('/images', express.static(path.join(__dirname, 'images')));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è landing1
app.use('/landing1', express.static(path.join(__dirname, 'landing1')));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è landing2
app.use('/landing2', express.static(path.join(__dirname, 'landing2')));

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId, message, parseMode = 'Markdown') {
    const url = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram:', chatId);
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
                parse_mode: parseMode
            })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            console.error('‚ùå Telegram API error:', result);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å Markdown, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if (result.error_code === 400 && parseMode !== 'HTML') {
                console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ Markdown...');
                return await sendTelegramMessage(chatId, message.replace(/[*_`\[\]()~>#+=|{}.!-]/g, ''), null);
            }
            return false;
        }
        
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        return true;
    } catch (error) {
        console.error('‚ùå Network error:', error);
        return false;
    }
}

// API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
app.post('/api/send-telegram', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', req.body);
    
    try {
        const { answers, landingSource } = req.body;
        
        if (!answers) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö answers');
            return res.status(400).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏' });
        }
        
        if (!process.env.TELEGRAM_BOT_TOKEN) {
            console.error('‚ùå –ù–µ—Ç TELEGRAM_BOT_TOKEN');
            return res.status(500).json({ error: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' });
        }
        
        if (!process.env.TELEGRAM_CHAT_ID) {
            console.error('‚ùå –ù–µ—Ç TELEGRAM_CHAT_ID');
            return res.status(500).json({ error: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω chat ID' });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞—è–≤–∫–∏
        const sourceText = landingSource === 'landing1' ? '–ü–û–®–£–ö –ê–°–ò–°–¢–ï–ù–¢–ê' : 
                          landingSource === 'landing2' ? '–ü–Ü–î–ë–Ü–† –ê–°–ò–°–¢–ï–ù–¢–Ü–í' : '–ù–ï–í–Ü–î–û–ú–û';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞
        let adminMessage = '';
        
        if (landingSource === 'landing1') {
            // –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è landing1
            adminMessage = `üîî –ù–û–í–ê –ó–ê–Ø–í–ö–ê: ${sourceText}

üë§ ${answers['–í–∞—à–µ —ñ–º\'—è —Ç–∞ –≤—ñ–∫'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üìß ${answers['Email –∞–¥—Ä–µ—Å–∞'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üì± @${answers['–í–∞—à Telegram']?.replace('@', '') || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üìû ${answers['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üíº –î–æ—Å–≤—ñ–¥ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞:
${answers['–ß–∏ –º–∞—î—Ç–µ –í–∏ –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º?'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üè¢ –ó–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é—î:
${answers['–ß–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –í–∏ –∑–∞—Ä–∞–∑?'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üí∞ –ë–∞–∂–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞:
${answers['–ù–∞ —è–∫–∏–π –¥–æ—Ö—ñ–¥ —Ö–æ—Ç—ñ–ª–∏ –±–∏ –≤–∏–π—Ç–∏ –æ–ø–∞–Ω—É–≤–∞–≤—à–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üïí ${new Date().toLocaleString('uk-UA')}`;
        } else {
            // –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è landing2
            const contacts = [];
            if (answers['Telegram']) contacts.push(`üì± @${answers['Telegram'].replace('@', '')}`);
            if (answers['–¢–µ–ª–µ—Ñ–æ–Ω']) contacts.push(`üìû ${answers['–¢–µ–ª–µ—Ñ–æ–Ω']}`);
            if (answers['Email']) contacts.push(`üìß ${answers['Email']}`);
            
            adminMessage = `üîî –ù–û–í–ê –ó–ê–Ø–í–ö–ê: ${sourceText}

${contacts.join('\n')}

üíº –ü–æ—Ç—Ä–µ–±—É—î –ø—ñ–¥–±—ñ—Ä –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –±—ñ–∑–Ω–µ—Å—É

üïí ${new Date().toLocaleString('uk-UA')}`;
        }

        console.log('üìù –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞—è–≤–∫–∏:', sourceText);
        console.log('üìù –§–æ—Ä–º—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π:', adminMessage.length);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        const sent = await sendTelegramMessage(process.env.TELEGRAM_CHAT_ID, adminMessage);
        
        if (sent) {
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            res.json({ success: true, message: '–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!' });
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
            res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' });
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'ok',
        telegram_configured: !!process.env.TELEGRAM_BOT_TOKEN,
        chat_id_configured: !!process.env.TELEGRAM_CHAT_ID
    });
});

// Error handling middleware
app.use((error, req, res, next) => {
    console.error('‚ùå Unhandled error:', error);
    res.status(500).json({ error: 'Server error' });
});

app.listen(PORT, () => {
    console.log(`üöÄ Server running on http://localhost:${PORT}`);
    console.log(`üìÑ Main page: http://localhost:${PORT}`);
    console.log(`üìÑ Landing 1: http://localhost:${PORT}/landing1/`);
    console.log(`üìÑ Landing 2: http://localhost:${PORT}/landing2/`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
    if (process.env.TELEGRAM_BOT_TOKEN) {
        fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`)
            .then(res => res.json())
            .then(data => {
                if (data.ok) {
                    console.log(`ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${data.result.first_name}`);
                } else {
                    console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º:', data);
                }
            })
            .catch(err => console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞:', err.message));
    }
});